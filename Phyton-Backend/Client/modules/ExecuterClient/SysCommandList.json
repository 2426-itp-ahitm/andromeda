[
    {
        "id": 1,
        "type": 0,
        "prompt": "Verschiebe Datei (A) nach (B)",
        "code": "class testCommand:\n    def run(self, params):\n        import os\n        print(\"Running testCommand\")\n        print(\"Params:\", params)\n        os.system(\"dir\")\n"
    },
    {
        "id": 2,
        "type": 0,
        "prompt": "Schalte den Rechner aus",
        "code": "class shutdown:\n    def run(self, params):\n        import os\n        os.system(\"shutdown -f -s -t 0\")\n"
    },
    {
        "id": 3,
        "type": 0,
        "prompt": "\u00d6ffne Programm (A)",
        "code": "import subprocess\nimport os\nimport winreg\nimport win32com.client\nimport json\n\nclass openProgramm:\n\n    COMMON_INSTALL_LOCATIONS = [\n        \"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\",\n        \"C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\"\n    ]\n\n    json_file_path = \"knownPaths.json\"\n\n    with open(json_file_path, \"r\") as f:\n        data = json.load(f)\n\n    KNOWN_APPS = {}\n    for app_name, app_path in data[\"known_applications\"].items():\n        app_path = app_path.replace(\"%USERNAME%\", os.getenv(\"USERNAME\"))\n        KNOWN_APPS[app_name] = app_path\n\n    def run(self, params):\n        app_name = params[0]\n        app_name = app_name.strip().lower()\n        self.open_application(app_name)\n\n    def get_install_path_from_where(self, app_name):\n        try:\n            result = subprocess.run([\"where\", app_name], capture_output=True, text=True, check=True)\n            paths = result.stdout.strip().split(\"\\n\")\n            return paths[0] if paths else None\n        except subprocess.CalledProcessError:\n            return None\n\n    def resolve_shortcut(self, shortcut_path):\n        shell = win32com.client.Dispatch(\"WScript.Shell\")\n        shortcut = shell.CreateShortcut(shortcut_path)\n        return shortcut.TargetPath\n\n    def search_common_install_paths(self, app_name):\n        for base_dir in self.COMMON_INSTALL_LOCATIONS:\n            base_dir = os.path.expandvars(base_dir)\n            if os.path.exists(base_dir):\n                for root, dirs, files in os.walk(base_dir):\n                    for file in files:\n                        if file.lower().endswith(\".lnk\") and app_name.lower() in file.lower():\n                            shortcut_path = os.path.join(root, file)\n                            resolved_path = self.resolve_shortcut(shortcut_path)\n                            if resolved_path:\n                                return resolved_path\n        return None\n\n    def get_install_path_from_registry(self, app_name):\n        registry_paths = [\n            \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\",\n            \"SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\"\n        ]\n        for reg_path in registry_paths:\n            try:\n                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_path) as reg:\n                    for i in range(winreg.QueryInfoKey(reg)[0]):\n                        try:\n                            subkey_name = winreg.EnumKey(reg, i)\n                            with winreg.OpenKey(reg, subkey_name) as subkey:\n                                display_name, _ = winreg.QueryValueEx(subkey, \"DisplayName\")\n                                if app_name.lower() in display_name.lower():\n                                    install_location, _ = winreg.QueryValueEx(subkey, \"InstallLocation\")\n                                    return install_location if install_location else None\n                        except (FileNotFoundError, OSError):\n                            continue\n                        except Exception:\n                            continue\n            except Exception:\n                continue\n        return None\n\n    def get_installation_path(self, app_name):\n        print(f\"Searching for '{app_name}'...\\n\")\n        if app_name in self.KNOWN_APPS:\n            path = os.path.expandvars(self.KNOWN_APPS[app_name])\n            print(f\"Known app found: {path}\")\n            return path\n        path = self.get_install_path_from_where(app_name)\n        if path:\n            print(f\"Found via where.exe: {path}\")\n            return path\n        path = self.search_common_install_paths(app_name)\n        if path:\n            print(f\"Found via common paths: {path}\")\n            return path\n        path = self.get_install_path_from_registry(app_name)\n        if path:\n            print(f\"Found via registry: {path}\")\n            return path\n        return None\n\n    def open_application(self, app_name):\n        path = self.get_installation_path(app_name)\n        if path:\n            print(f\"Path before checking: {path}\")\n            path = os.path.expandvars(path)\n            if os.path.isfile(path):\n                print(f\"Opening: {path}\")\n                try:\n                    subprocess.Popen(path, shell=True)\n                except Exception as e:\n                    print(f\"Error opening application: {e}\")\n            else:\n                print(\"Error: path does not point to a valid executable.\")\n        else:\n            print(\"Application not found.\")\n"
    },
    {
        "id": 4,
        "type": 0,
        "prompt": "Schlie\u00dfe Programm (A)",
        "code": "import pyautogui\nimport pygetwindow as gw\nimport psutil\nimport time\nimport os\n\nclass closeWindow:\n    def run(self, params):\n        tab_name = params[0]\n        windows = gw.getWindowsWithTitle(tab_name)\n\n        if not windows:\n            print(f\"No tab found with title: {tab_name}\")\n            return\n\n        for window in windows:\n            print(f\"Closing window: {window.title}\")\n\n            # Restore window if minimized\n            if window.isMinimized:\n                window.restore()\n                time.sleep(0.5)\n\n            # Attempt to close with Alt+F4\n            window.activate()\n            time.sleep(0.5)\n            pyautogui.hotkey(\"alt\", \"f4\")\n            time.sleep(1)\n\n            # If still open, force close the process\n            if gw.getWindowsWithTitle(tab_name):\n                hwnd = window._hWnd  # Get window handle\n                for proc in psutil.process_iter(['pid', 'name']):\n                    try:\n                        for w in proc.open_files():\n                            if hwnd in str(w.fd):\n                                os.system(f\"taskkill /PID {proc.pid} /F\")\n                                print(f\"Force closed {proc.name()}\")\n                                return\n                    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):\n                        pass\n\nif __name__ == \"__main__\":\n    name = input(\"Enter the name of the window you want to close: \")\n    close_window = closeWindow()\n    close_window.run([name])\n"
    },
    {
        "id": 5,
        "type": 0,
        "prompt": "F\u00fchre ein git commit aus",
        "code": null
    },
    {
        "id": 6,
        "type": 0,
        "prompt": "Spiel die Wiedergabe",
        "code": "import pyautogui\n\nclass startPlayback:\n    def run(self, params):\n        pyautogui.press(\"playpause\")\n\nif __name__ == \"__main__\":\n    pyautogui.press(\"playpause\")"
    },
    {
        "id": 7,
        "type": 0,
        "prompt": "Pausiere die Wiedergabe",
        "code": "import pyautogui\n\nclass startPlayback:\n    def run(self, params):\n        pyautogui.press(\"playpause\")\n\nif __name__ == \"__main__\":\n    pyautogui.press(\"playpause\")"
    },
    {
        "id": 8,
        "type": 0,
        "prompt": "Komprimiere Datei (A)",
        "code": null
    },
    {
        "id": 9,
        "type": 0,
        "prompt": "Suche Datei (A)",
        "code": "import os\nimport subprocess\nimport json\nfrom pathlib import Path\n\nCACHE_FILE = \"file_cache.json\"\nSPECIAL_FOLDERS = {\n    \"desktop\": str(Path.home() / \"Desktop\"),\n    \"downloads\": str(Path.home() / \"Downloads\"),\n    \"dokumente\": str(Path.home() / \"Documents\"),\n    \"bilder\": str(Path.home() / \"Pictures\"),\n    \"musik\": str(Path.home() / \"Music\"),\n    \"videos\": str(Path.home() / \"Videos\"),\n    \"papierkorb\": \"shell:RecycleBinFolder\"\n}\n\nclass findFileOrFolder:\n    def __init__(self):\n        self.cache = self.load_cache()\n\n    def load_cache(self):\n        if os.path.exists(CACHE_FILE):\n            with open(CACHE_FILE, \"r\") as f:\n                return json.load(f)\n        return {}\n\n    def save_cache(self):\n        with open(CACHE_FILE, \"w\") as f:\n            json.dump(self.cache, f)\n\n    def run(self, params):\n        name = params[0]\n        if name.lower() in self.cache:\n            path = self.cache[name.lower()]\n            if os.path.exists(path) or path.startswith(\"shell:\"):\n                subprocess.run([\"explorer\", \"/select,\", path])\n                print(f\"Opened from cache: {path}\")\n                return\n            else:\n                del self.cache[name.lower()]  # Remove invalid path\n                self.save_cache()\n\n        # Check special folders\n        if name.lower() in SPECIAL_FOLDERS:\n            path = SPECIAL_FOLDERS[name]\n            subprocess.run([\"explorer\", path])\n            print(f\"Opened special folder: {path}\")\n            return\n\n        search_path = \"C:\\\\\"  \n\n        # Iterate over all folders and files in the directory\n        for root, dirs, files in os.walk(search_path):\n            # Skip the \"Recent\" folder\n            if \"Recent\" in root:\n                continue\n\n            # Check if the name matches exactly or partially (extension omitted)\n            if name in dirs:\n                folder_path = os.path.join(root, name)\n                self.cache[name] = folder_path\n                self.save_cache()\n                subprocess.run([\"explorer\", folder_path])\n                print(f\"Opened folder: {folder_path}\")\n                return\n            for file in files:\n                if name in file:  # Matches if the name is part of the file name\n                    file_path = os.path.join(root, file)\n                    self.cache[name.lower()] = file_path\n                    self.save_cache()\n                    subprocess.run([\"explorer\", \"/select,\", file_path])\n                    print(f\"Opened file location: {file_path}\")\n                    return\n\n        print(\"File or folder not found.\")\n\nif __name__ == \"__main__\":\n    name = input(\"Enter the file or folder name to search: \")\n    opener = findFileOrFolder()\n    opener.run([name])\n"
    },
    {
        "id": 10,
        "type": 0,
        "prompt": "Geh in Verzeichnis (A)",
        "code": "import os\\nimport subprocess\\nimport json\\nfrom pathlib import Path\\n\\nCACHE_FILE = \\\"file_cache.json\\\"\\nSPECIAL_FOLDERS = {\\n    \\\"desktop\\\": str(Path.home() / \\\"Desktop\\\"),\\n    \\\"downloads\\\": str(Path.home() / \\\"Downloads\\\"),\\n    \\\"dokumente\\\": str(Path.home() / \\\"Documents\\\"),\\n    \\\"bilder\\\": str(Path.home() / \\\"Pictures\\\"),\\n    \\\"musik\\\": str(Path.home() / \\\"Music\\\"),\\n    \\\"videos\\\": str(Path.home() / \\\"Videos\\\"),\\n    \\\"papierkorb\\\": \\\"shell:RecycleBinFolder\\\"\\n}\\n\\nclass findFileOrFolder:\\n    def __init__(self):\\n        self.cache = self.load_cache()\\n\\n    def load_cache(self):\\n        if os.path.exists(CACHE_FILE):\\n            with open(CACHE_FILE, \\\"r\\\") as f:\\n                return json.load(f)\\n        return {}\\n\\n    def save_cache(self):\\n        with open(CACHE_FILE, \\\"w\\\") as f:\\n            json.dump(self.cache, f)\\n\\n    def run(self, params):\\n        name = params[0]\\n        if name.lower() in self.cache:\\n            path = self.cache[name.lower()]\\n            if os.path.exists(path) or path.startswith(\\\"shell:\\\\\"):\\n                subprocess.run([\\\"explorer\\\", \\\"/select,\\\", path])\\n                print(f\\\"Opened from cache: {path}\\\")\\n                return\\n            else:\\n                del self.cache[name.lower()]  # Remove invalid path\\n                self.save_cache()\\n\\n        # Check special folders\\n        if name.lower() in SPECIAL_FOLDERS:\\n            path = SPECIAL_FOLDERS[name]\\n            subprocess.run([\\\"explorer\\\", path])\\n            print(f\\\"Opened special folder: {path}\\\")\\n            return\\n\\n        search_path = \\\"C:\\\\\\\\\\\"  # Change this to the root directory you want to search in\\n\\n        for root, dirs, files in os.walk(search_path):\\n            if \\\"Recent\\\" in root:\\n                continue\\n\\n            if name in dirs:\\n                folder_path = os.path.join(root, name)\\n                self.cache[name] = folder_path\\n                self.save_cache()\\n                subprocess.run([\\\"explorer\\\", folder_path])\\n                print(f\\\"Opened folder: {folder_path}\\\")\\n                return\\n            for file in files:\\n                if name in file:\\n                    file_path = os.path.join(root, file)\\n                    self.cache[name.lower()] = file_path\\n                    self.save_cache()\\n                    subprocess.run([\\\"explorer\\\", \\\"/select,\\\", file_path])\\n                    print(f\\\"Opened file location: {file_path}\\\")\\n                    return\\n\\n        print(\\\"File or folder not found.\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    name = input(\\\"Enter the file or folder name to search: \\\" )\\n    opener = findFileOrFolder()\\n    opener.run([name])\\n"
    },
    {
        "id": 11,
        "type": 0,
        "prompt": "Schalte dich selbst aus",
        "code": null
    },
    {
        "id": 12,
        "type": 0,
        "prompt": "\u00f6ffne das Fenster (A)",
        "code": "import pygetwindow as gw\nimport pyautogui\nimport time\n\nclass openWindow:\n    def run(self, params):\n        window_name = params[0]\n        windows = gw.getWindowsWithTitle(window_name)\n        if not windows:\n            print(f\"No window found with title containing: {window_name}\")\n            return\n\n        window = windows[0]  # Take the first matching window\n        if window.isMinimized:\n            window.restore()\n            time.sleep(0.5)\n            window.activate()\n        time.sleep(0.5)  # Small delay to ensure proper focus\n        print(f\"Open window: {window.title}\")\n\nif __name__ == \"__main__\":\n        window_name = input(\"Enter the name of the window you want to open: \")\n        max_window = openWindow()\n        max_window.run([window_name])"
    },
    {
        "id": 13,
        "type": 0,
        "prompt": "schlie\u00dfe das Fenster (A)",
        "code": "import pyautogui\nimport pygetwindow as gw\nimport psutil\nimport time\nimport os\n\nclass closeWindow:\n    def run(self, params):\n        tab_name = params[0]\n        windows = gw.getWindowsWithTitle(tab_name)\n\n        if not windows:\n            print(f\"No tab found with title: {tab_name}\")\n            return\n\n        for window in windows:\n            print(f\"Closing window: {window.title}\")\n\n            # Restore window if minimized\n            if window.isMinimized:\n                window.restore()\n                time.sleep(0.5)\n\n            # Attempt to close with Alt+F4\n            window.activate()\n            time.sleep(0.5)\n            pyautogui.hotkey(\"alt\", \"f4\")\n            time.sleep(1)\n\n            # If still open, force close the process\n            if gw.getWindowsWithTitle(tab_name):\n                hwnd = window._hWnd  # Get window handle\n                for proc in psutil.process_iter(['pid', 'name']):\n                    try:\n                        for w in proc.open_files():\n                            if hwnd in str(w.fd):\n                                os.system(f\"taskkill /PID {proc.pid} /F\")\n                                print(f\"Force closed {proc.name()}\")\n                                return\n                    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):\n                        pass\n\nif __name__ == \"__main__\":\n    name = input(\"Enter the name of the window you want to close: \")\n    close_window = closeWindow()\n    close_window.run([name])"
    },
    {
        "id": 14,
        "type": 0,
        "prompt": "maximiere das Fenster (A)",
        "code": "import pygetwindow as gw, win32gui\nimport time\nimport ctypes\n\nclass maxWindow:\n    def run(self, params):\n        if not params:\n            window = gw.getActiveWindow()\n            if not window:\n                print(\"No active window found.\")\n                return\n        else:\n            window_name = params[0]\n            windows = gw.getWindowsWithTitle(window_name)\n            if not windows:\n                print(f\"No window found with title containing: {window_name}\")\n                return\n            window = windows[0]  # Take the first matching window\n\n        if window.isMinimized:\n            window.restore()\n            time.sleep(0.5)\n            window.activate()\n\n        time.sleep(0.5)  # Small delay to ensure proper focus\n        window.maximize()  # Properly maximize the window\n        ctypes.windll.user32.SetForegroundWindow(window._hWnd)  # Bring the window to the foreground\n        print(f\"Maximized and activated window: {window.title}\")\n\nif __name__ == \"__main__\":\n    window_name = input(\"Enter the name of the window you want to maximize (leave empty to maximize the current active window): \")\n    max_window = maxWindow()\n    max_window.run([window_name] if window_name else [])"
    },
    {
        "id": 15,
        "type": 0,
        "prompt": "minimiere das Fenster (A)",
        "code": "import pygetwindow as gw\n\nclass minWindow:\n    def run(self, params):\n        if params:\n            window_name = params[0]\n            windows = gw.getWindowsWithTitle(window_name)\n            if not windows:\n                print(f\"No window found with title containing: {window_name}\")\n                return\n            window = windows[0]  # Take the first matching window\n        else:\n            window = gw.getActiveWindow()\n            if not window:\n                print(\"No active window found\")\n                return\n\n        window.minimize()\n        print(f\"Minimized window: {window.title}\")\n\nif __name__ == \"__main__\":\n    window_name = input(\"Enter the name of the window you want to minimize (leave empty to minimize the active window): \")\n    min_window = minWindow()\n    min_window.run([window_name] if window_name else [])"
    },
    {
        "id": 16,
        "type": 0,
        "prompt": "setze die Lautst\u00e4rke auf (A)",
        "code": "import pycaw.pycaw as pycaw\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\nfrom comtypes import CLSCTX_ALL\n\nclass setVolume:\n    def run(self, params):\n        if not params:\n            print(\"No volume level provided.\")\n            return\n\n        level = params[0]\n        level = level.replace(\"%\", \"\")  # Remove % sign if present\n        if isinstance(level, str):\n            level = level.lower()\n            if level.__contains__(\"max\"):\n                level = 100\n            elif level.__contains__(\"min\"):\n                level = 0\n\n        try:\n            level = int(level)\n            if 0 <= level <= 100:\n                devices = AudioUtilities.GetSpeakers()\n                interface = devices.Activate(\n                    IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n                volume = interface.QueryInterface(IAudioEndpointVolume)\n                volume.SetMasterVolumeLevelScalar(level / 100, None)\n                print(f\"Set volume to {level}%\")\n            else:\n                print(\"Please enter a volume level between 0 and 100.\")\n        except ValueError:\n            print(\"Invalid input. Enter a number between 0 and 100, or ''min''/''max''.\")\n\nif __name__ == \"__main__\":\n    level = input(\"Enter volume level (0-100) or ''min''/''max'': \")\n    set_volume = setVolume()\n    set_volume.run([level])"
    },
    {
        "id": 17,
        "type": 0,
        "prompt": "stumme die Audio",
        "code": "import pycaw.pycaw as pycaw\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\nfrom comtypes import CLSCTX_ALL\n\nclass toggleMute:\n    def run(self,params):\n        devices = AudioUtilities.GetSpeakers()\n        interface = devices.Activate(\n            IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n        volume = interface.QueryInterface(IAudioEndpointVolume)\n\n        is_muted = volume.GetMute()\n        volume.SetMute(not is_muted, None)\n        status = \"Muted\" if not is_muted else \"Unmuted\"\n        print(f\"Volume {status}\")\n\nif __name__ == \"__main__\":\n    toggle_mute = toggleMute()\n    toggle_mute.run()"
    },
    {
        "id": 18,
        "type": 0,
        "prompt": "stumme die Audio",
        "code": "import pycaw.pycaw as pycaw\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\nfrom comtypes import CLSCTX_ALL\n\nclass toggleMute:\n    def run(self,params):\n        devices = AudioUtilities.GetSpeakers()\n        interface = devices.Activate(\n            IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n        volume = interface.QueryInterface(IAudioEndpointVolume)\n\n        is_muted = volume.GetMute()\n        volume.SetMute(not is_muted, None)\n        status = \"Muted\" if not is_muted else \"Unmuted\"\n        print(f\"Volume {status}\")\n\nif __name__ == \"__main__\":\n    toggle_mute = toggleMute()\n    toggle_mute.run()"
    },
    {
        "id": 19,
        "type": 0,
        "prompt": "setze die Helligkeit auf (A)",
        "code": "import screen_brightness_control as sbc\n\nclass setLightning:\n    def run(self, params):\n        if not params:\n            print(\"No brightness level provided.\")\n            return\n\n        level = params[0]\n        level = level.replace(\"%\", \"\")  # Remove % sign if present\n        if isinstance(level, str):\n            level = level.lower()\n            if level.__contains__(\"max\"):\n                level = 100\n            elif level.__contains__(\"min\"):\n                level = 0\n\n        try:\n            level = int(level)\n            if 0 <= level <= 100:\n                sbc.set_brightness(level)\n                print(f\"Set brightness to {level}%\")\n            else:\n                print(\"Please enter a brightness level between 0 and 100.\")\n        except ValueError:\n            print(\"Invalid input. Enter a number between 0 and 100, or ''min''/''max''.\")\n\nif __name__ == \"__main__\":\n    level = input(\"Enter brightness level (0-100) or ''min''/''max'': \")\n    set_lightning = setLightning()\n    set_lightning.run([level])"
    },
    {
        "id": 20,
        "type": 0,
        "prompt": "Erh\u00f6he die Helligkeit um (A)",
        "code": "import screen_brightness_control as sbc\n\nclass increaseLightning:\n    def run(self, params):\n        print(sbc.get_brightness())\n        if not params:\n            print(\"No brightness level provided.\")\n            sbc.set_brightness(sbc.get_brightness()[0]+20)\n            return\n\n        level = params[0]\n        level = level.replace(\"%\", \"\")  # Remove % sign if present\n        if isinstance(level, str):\n            level = level.lower()\n            if level.__contains__(\"max\"):\n                level = 100\n            elif level.__contains__(\"min\"):\n                level = 0\n\n        try:\n            level = int(level)\n            if 0 <= level <= 100:\n                sbc.set_brightness(sbc.get_brightness()[0]+level)\n                print(f\"Increased brightness with {level}%\")\n            else:\n                sbc.set_brightness(sbc.get_brightness()[0]+20)\n        except ValueError:\n             sbc.set_brightness(sbc.get_brightness()[0]+20)\n\nif __name__ == \"__main__\":\n    level = input(\"Enter brightness level (0-100) or ''min''/''max'': \")\n    set_lightning = increaseLightning()\n    set_lightning.run([level])"
    },
    {
        "id": 21,
        "type": 0,
        "prompt": "Mach die Helligkeit niedriger um (A)",
        "code": "import screen_brightness_control as sbc\n\nclass decreaseLightning:\n    def run(self, params):\n        print(sbc.get_brightness())\n        if not params:\n            print(\"No brightness level provided.\")\n            sbc.set_brightness(sbc.get_brightness()[0]-20)\n            return\n\n        level = params[0]\n        level = level.replace(\"%\", \"\")  # Remove % sign if present\n        if isinstance(level, str):\n            level = level.lower()\n            if level.__contains__(\"max\"):\n                level = 100\n            elif level.__contains__(\"min\"):\n                level = 0\n\n        try:\n            level = int(level)\n            if 0 <= level <= 100:\n                sbc.set_brightness(sbc.get_brightness()[0]-level)\n                print(f\"Decreased brightness with {level}%\")\n            else:\n                sbc.set_brightness(sbc.get_brightness()[0]-20)\n        except ValueError:\n             sbc.set_brightness(sbc.get_brightness()[0]-20)\n\nif __name__ == \"__main__\":\n    level = input(\"Enter brightness level (0-100) or ''min''/''max'': \")\n    set_lightning = decreaseLightning()\n    set_lightning.run([level])"
    },
    {
        "id": 22,
        "type": 0,
        "prompt": "Erh\u00f6he die Lautst\u00e4rke um (A)",
        "code": "import pycaw.pycaw as pycaw\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\nfrom comtypes import CLSCTX_ALL\nimport pycaw.pycaw as pycaw\n\nclass increaseVolume:\n    def run(self, params):\n        increment = 0\n        if not params:\n            print(\"No volume level provided.\")\n            increment = 20\n        else:\n            increment = params[0]\n            increment = increment.replace(\"%\", \"\")  # Remove % sign if present\n        if isinstance(increment, str):\n            increment = increment.lower()\n            if increment.__contains__(\"max\"):\n                increment = 100\n            elif increment.__contains__(\"min\"):\n                increment = 0\n\n        try:\n            increment = int(increment)\n            devices = AudioUtilities.GetSpeakers()\n            interface = devices.Activate(\n                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n            volume = interface.QueryInterface(IAudioEndpointVolume)\n            current_volume = volume.GetMasterVolumeLevelScalar()\n            new_volume = current_volume + (increment / 100)\n            new_volume = max(0, min(new_volume, 1))  # Ensure volume is between 0 and 1\n            volume.SetMasterVolumeLevelScalar(new_volume, None)\n            print(f\"Increased volume by {increment}%. New volume is {int(new_volume * 100)}%\")\n        except ValueError:\n            increment = 20\n            devices = AudioUtilities.GetSpeakers()\n            interface = devices.Activate(\n                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n            volume = interface.QueryInterface(IAudioEndpointVolume)\n            current_volume = volume.GetMasterVolumeLevelScalar()\n            new_volume = current_volume + (increment / 100)\n            new_volume = max(0, min(new_volume, 1))  # Ensure volume is between 0 and 1\n            volume.SetMasterVolumeLevelScalar(new_volume, None)\n            print(f\"Increased volume by {increment}%. New volume is {int(new_volume * 100)}%\")\n\nif __name__ == \"__main__\":\n    increment = input(\"Enter volume increment (0-100) or ''min''/''max'': \")\n    increase_volume = increaseVolume()\n    increase_volume.run([increment])"
    },
    {
        "id": 23,
        "type": 0,
        "prompt": "Mach die Lautst\u00e4rke niedriger um (A)",
        "code": "import pycaw.pycaw as pycaw\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\nfrom comtypes import CLSCTX_ALL\nimport pycaw.pycaw as pycaw\n\nclass decreaseVolume:\n    def run(self, params):\n        increment = 0\n        if not params:\n            print(\"No volume level provided.\")\n            increment = 20\n        else:\n            increment = params[0]\n            increment = increment.replace(\"%\", \"\")  # Remove % sign if present\n        if isinstance(increment, str):\n            increment = increment.lower()\n            if increment.__contains__(\"max\"):\n                increment = 100\n            elif increment.__contains__(\"min\"):\n                increment = 0\n\n        try:\n            increment = int(increment)\n            devices = AudioUtilities.GetSpeakers()\n            interface = devices.Activate(\n                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n            volume = interface.QueryInterface(IAudioEndpointVolume)\n            current_volume = volume.GetMasterVolumeLevelScalar()\n            new_volume = current_volume - (increment / 100)\n            new_volume = max(0, min(new_volume, 1))  # Ensure volume is between 0 and 1\n            volume.SetMasterVolumeLevelScalar(new_volume, None)\n            print(f\"Decrease volume by {increment}%. New volume is {int(new_volume * 100)}%\")\n        except ValueError:\n            increment = 20\n            devices = AudioUtilities.GetSpeakers()\n            interface = devices.Activate(\n                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n            volume = interface.QueryInterface(IAudioEndpointVolume)\n            current_volume = volume.GetMasterVolumeLevelScalar()\n            new_volume = current_volume - (increment / 100)\n            new_volume = max(0, min(new_volume, 1))  # Ensure volume is between 0 and 1\n            volume.SetMasterVolumeLevelScalar(new_volume, None)\n            print(f\"Decrease volume by {increment}%. New volume is {int(new_volume * 100)}%\")\n\nif __name__ == \"__main__\":\n    increment = input(\"Enter volume increment (0-100) or ''min''/''max'': \")\n    increase_volume = decreaseVolume()\n    increase_volume.run([increment])"
    },
    {
        "id": 24,
        "type": 0,
        "prompt": "Mache einen Screenshot von (A)",
        "code": "import pyautogui\nimport datetime\nimport os\nimport sys\nimport pygetwindow as gw, win32gui, win32con\nimport time\nfrom helpers.config import pathToScreenshotFolder\nimport ctypes\nclass takeScreenshot:\n    def run(self, params):\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        directory = pathToScreenshotFolder\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n\n        filename = os.path.join(directory, f\"screenshot_{timestamp}.png\")\n\n        if params:\n            window_name = params[0]\n            windows = gw.getWindowsWithTitle(window_name)\n            if not windows:\n                print(f\"No window found with title containing: {window_name}\")\n                return\n            window = windows[0]  # Take the first matching window\n            if window.isMinimized:\n                window.restore()\n                time.sleep(0.5)\n                window.activate()\n            hwnd = gw.getWindowsWithTitle(window.title)[0]._hWnd\n            win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)\n            win32gui.SetForegroundWindow(hwnd)\n            ctypes.windll.user32.SetForegroundWindow(window._hWnd)\n            time.sleep(0.5)  # Small delay to ensure proper focus\n            bbox = (window.left, window.top, window.width, window.height)\n            screenshot = pyautogui.screenshot(region=bbox)\n            screenshot.save(filename)\n            print(f\"Screenshot of window '{window.title}' saved as {filename}\")\n        else:\n            screenshot = pyautogui.screenshot()\n            screenshot.save(filename)\n            print(f\"Screenshot saved as {filename}\")\n\nif __name__ == \"__main__\":\n    window_name = input(\"Enter window name (leave empty for full screen): \")\n    take_screenshot = takeScreenshot()\n    take_screenshot.run([window_name] if window_name else [])"
    }
]